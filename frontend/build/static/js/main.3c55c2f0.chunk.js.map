{"version":3,"sources":["Welcome.tsx","Grid.tsx","Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Welcome","registerUser","useCallback","event","fetch","method","body","onSubmit","name","GridContainer","styled","section","Grid","div","Cell","highlight","YLabels","XLabels","Label","cells","Array","xlabels","ylabels","GridComponent","props","useState","hoveredCell","setHoveredCell","sendCellClick","index","sendMessage","JSON","stringify","type","message","activeRow","Math","floor","activeColumn","rowCells","rangeInclusive","columnCells","map","cell","includes","key","onMouseEnter","onMouseLeave","onClick","label","connectionStatus","ReadyState","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","Game","socketUrl","setSocketUrl","useWebSocket","lastMessage","readyState","messageHistory","useRef","current","useMemo","concat","className","App","useLocalStorage","token","loading","useEffect","a","then","r","json","makeRequest","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3c55c2f0.chunk.js","sourcesContent":["import React, { useCallback, FormEvent } from \"react\";\n\nexport function Welcome() {\n  const registerUser = useCallback((event: FormEvent) => {\n    debugger;\n\n    fetch(\"/register\", {\n      method: \"POST\",\n      body: \"\",\n    });\n  }, []);\n\n  return (\n    <>\n      <div>Welcome</div>\n      <form onSubmit={registerUser}>\n        <label>username</label>\n        <input name=\"username\" />\n      </form>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport rangeInclusive from \"range-inclusive\";\nimport { SendMessage } from \"react-use-websocket\";\n\nexport const GridContainer = styled.section`\n  position: relative;\n  padding-bottom: 100%;\n  border: 2px solid black;\n  margin-top: 10%;\n`;\n\nexport const Grid = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  overflow: hidden;\n`;\n\nexport const Cell = styled.div<{ highlight: boolean }>`\n  flex: 0 0 10%;\n  border-right: 1px solid gray;\n  border-bottom: 1px solid gray;\n  overflow: hidden;\n  background-color: ${({ highlight }) => (highlight ? \"whitesmoke\" : null)};\n\n  &:nth-child(10n) {\n    border-right: 0;\n  }\n\n  &:nth-child(n + 91) {\n    border-bottom: 0;\n  }\n`;\n\nexport const YLabels = styled.div`\n  width: 10%;\n  position: absolute;\n  right: 100%;\n  margin-right: 2px;\n  top: 0;\n  bottom: 0;\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const XLabels = styled.div`\n  height: 10%;\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  right: 0;\n  background-color: lightgreen;\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 2px;\n`;\n\nexport const Label = styled.div`\n  flex: 0 0 10%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-transform: uppercase;\n`;\n\nconst cells = [...new Array(100)];\nconst xlabels = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"];\nconst ylabels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\ninterface Props {\n  sendMessage: SendMessage;\n}\n\nexport function GridComponent(props: Props) {\n  const [hoveredCell, setHoveredCell] = useState(-1);\n\n  const sendCellClick = (index: number) => () =>\n    props.sendMessage(\n      JSON.stringify({ type: \"player_click\", message: `cell: ${index}` })\n    );\n\n  const activeRow = Math.floor(hoveredCell / 10);\n  const activeColumn = hoveredCell % 10;\n\n  const rowCells =\n    hoveredCell > -1\n      ? rangeInclusive(activeRow * 10, activeRow * 10 + 9)\n      : [hoveredCell];\n\n  const columnCells =\n    hoveredCell > -1\n      ? rangeInclusive(activeColumn, activeColumn + 90, 10)\n      : [hoveredCell];\n\n  return (\n    <GridContainer>\n      <Grid>\n        {cells.map((cell, index) => {\n          const highlight = [...rowCells, ...columnCells].includes(index);\n\n          return (\n            <Cell\n              highlight={highlight}\n              key={index}\n              onMouseEnter={() => setHoveredCell(index)}\n              onMouseLeave={() => setHoveredCell(-1)}\n              onClick={sendCellClick(index)}\n            />\n          );\n        })}\n      </Grid>\n      <YLabels>\n        {xlabels.map((label) => (\n          <Label key={label}>{label}</Label>\n        ))}\n      </YLabels>\n      <XLabels>\n        {ylabels.map((label) => (\n          <Label key={label}>{label}</Label>\n        ))}\n      </XLabels>\n    </GridContainer>\n  );\n}\n","import React, { useRef, useMemo, useState, useCallback } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { GridComponent } from \"./Grid\";\n\ninterface Props {\n  user: string;\n  token: string;\n}\n\nconst connectionStatus = {\n  [ReadyState.CONNECTING]: \"Connecting\",\n  [ReadyState.OPEN]: \"Open\",\n  [ReadyState.CLOSING]: \"Closing\",\n  [ReadyState.CLOSED]: \"Closed\",\n  [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\n};\n\nexport function Game(props: Props) {\n  const playerId = 1;\n  const [socketUrl, setSocketUrl] = useState(\"wss://echo.websocket.org\");\n  // const [socketUrl, setSocketUrl] = useState(\"/ws\");\n\n  const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl);\n\n  // This will actually happen when the user logs in\n  const handleClickChangeSocketUrl = useCallback(\n    () => setSocketUrl(`/ws/${playerId}`),\n    []\n  );\n\n  const messageHistory = useRef<MessageEvent[]>([]);\n\n  messageHistory.current = useMemo(\n    () => messageHistory.current.concat(lastMessage),\n    [lastMessage]\n  );\n\n  return (\n    <div className=\"App\">\n      <h2>Websocket: {connectionStatus[readyState]}</h2>\n      <GridComponent sendMessage={sendMessage} />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport useLocalStorage from \"react-use-localstorage\";\nimport { Welcome } from \"./Welcome\";\nimport { Game } from \"./Game\";\n\nfunction App() {\n  const [name, setName] = useLocalStorage(\"name\", \"\");\n  const [token, setToken] = useLocalStorage(\"token\", \"\");\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const makeRequest = async () => {\n      const response = await fetch(\"/register\", {\n        method: \"POST\",\n        body: JSON.stringify({ name, token }),\n      }).then((r) => r.json());\n      debugger;\n    };\n    makeRequest();\n  }, [name, token]);\n\n  if ((!name || !token) && loading) {\n    return <Welcome />;\n  }\n\n  return <Game user={name} token={token} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./reset.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}